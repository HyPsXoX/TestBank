<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - Test Bank System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .navbar.navbar-expand-lg.navbar-dark {
            background: linear-gradient(135deg, #001a8f 0%, #d4cc26 100%) !important;
        }
        .test-card {
            transition: transform 0.2s;
            border-left: 4px solid #0d6efd;
        }
        .test-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .status-badge {
            font-size: 0.75em;
        }
        .question-item {
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            background: #f8f9fa;
        }
        .file-preview {
            max-width: 100px;
            max-height: 100px;
            margin: 5px;
            border-radius: 4px;
        }
        .choice-item {
            margin-bottom: 8px;
        }
        .enumeration-item {
            margin-bottom: 5px;
        }
    </style>
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="#">
                <i class="fas fa-graduation-cap me-2"></i>Test Bank System
            </a>
            <div class="navbar-nav ms-auto">
                <span class="navbar-text me-3">
                    Welcome, <%= user ? user.fullName : "Guest" %> (Dean)
                </span>
                <form action="/auth/logout" method="POST" class="d-inline">
                    <button type="submit" class="btn btn-outline-light btn-sm">Logout</button>
                </form>
            </div>
        </div>
    </nav>

    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
<nav class="col-md-3 col-lg-2 d-md-block bg-light sidebar">
  <div class="position-sticky pt-3">
    <ul class="nav flex-column">
      <li class="nav-item">
        <a class="nav-link active" href="/dean/dashboard">
          <i class="fas fa-tachometer-alt me-2"></i>Dashboard
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/dean/manage-accounts">
          <i class="fas fa-users-cog me-2"></i>Manage Accounts
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/dean/sections">
          <i class="fas fa-layer-group me-2"></i>Sections
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/dean/tests">
          <i class="fas fa-file-alt me-2"></i>Test Management
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/dean/student-performance">
          <i class="fas fa-chart-line me-2"></i>Student Performance
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/dean/reports">
          <i class="fas fa-chart-bar me-2"></i>Reports & Analytics
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/dean/account">
          <i class="fas fa-user-cog me-2"></i>My Account
        </a>
      </li>
    </ul>
  </div>
</nav>

            <!-- Main content -->
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
                <!-- Header -->
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                    <h1 class="h2">
                        <i class="fas fa-file-alt me-2"></i><%= title %>
                    </h1>
                    <div class="btn-toolbar mb-2 mb-md-0">
                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createTestModal">
                            <i class="fas fa-plus me-2"></i>Create Test
                        </button>
                    </div>
                </div>

                <!-- Dynamic Overview Cards -->
                <div class="row mb-4">
                    <% 
                        const totalTests = tests ? tests.length : 0;
                        const publicTests = tests ? tests.filter(t => t.access === 'Public').length : 0;
                        const privateTests = tests ? tests.filter(t => t.access === 'Private').length : 0;
                    %>
                    <div class="col-md-3">
                        <div class="card text-white bg-primary">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h4><%= totalTests %></h4>
                                        <p>Total Tests</p>
                                    </div>
                                    <i class="fas fa-file-alt fa-2x"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-white bg-success">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h4><%= publicTests %></h4>
                                        <p>Public Tests</p>
                                    </div>
                                    <i class="fas fa-unlock fa-2x"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-white bg-warning">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h4><%= privateTests %></h4>
                                        <p>Private Tests</p>
                                    </div>
                                    <i class="fas fa-lock fa-2x"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-white bg-info">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h4><%= tests && tests.filter(t => t.questions.length > 0).length %></h4>
                                        <p>With Questions</p>
                                    </div>
                                    <i class="fas fa-question-circle fa-2x"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Dynamic Tests Table -->
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">All Tests</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped align-middle">
                                <thead>
                                    <tr>
                                        <th>#</th>
                                        <th>Title</th>
                                        <th>Subject Code</th>
                                        <th>Access</th>
                                        <th>Description</th>
                                        <th>Created By</th>
                                        <th>Created/Updated</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% if (tests && tests.length > 0) { %>
                                        <% tests.forEach((test, index) => { %>
                                        <tr>
                                            <td><%= index + 1 %></td>
                                            <td><%= test.title %></td>
                                            <td><%= test.subjectCode %></td>
                                            <td>
                                            <span class="badge <%= test.access === 'Public' ? 'bg-success' : 'bg-secondary' %>">
                                                <%= test.access %>
                                            </span>
                                            </td>
                                            <td><%= test.description || '-' %></td>
                                            <td><%= test.createdByName || user.fullName %></td>
                                            <td>
                                            <small>Created: <%= new Date(test.createdAt).toLocaleDateString() %></small><br>
                                            <small>Updated: <%= new Date(test.updatedAt).toLocaleDateString() %></small>
                                            </td>
                                            <td class="text-center">
                                                
                                            <!-- Edit Test Button -->
                                            <button 
                                                class="btn btn-sm btn-outline-warning me-1 edit-test"
                                                data-id="<%= test._id %>"
                                                data-title="<%= test.title %>"
                                                data-subject="<%= test.subjectCode %>"
                                                data-description="<%= test.description %>"
                                                data-access="<%= test.access %>"
                                                data-timelimit="<%= test.timeLimit %>"
                                                data-howManyQuestions="<%= test.howManyQuestions %>"
                                                data-deadline="<%= test.deadline ? new Date(test.deadline).toISOString().slice(0, 16) : '' %>"
                                                >
                                                <i class="fas fa-edit"></i>
                                            </button>


                                            <!-- Delete Test Form -->
                                            <form 
                                                action="/dean/tests/delete/<%= test._id %>" 
                                                method="POST" 
                                                class="d-inline"
                                                onsubmit="return confirm('Are you sure you want to delete this test?')"
                                            >
                                                <button 
                                                type="submit" 
                                                class="btn btn-sm btn-outline-danger"
                                                title="Delete Test"
                                                >
                                                <i class="fas fa-trash"></i>
                                                </button>
                                            </form>
                                            </td>
                                        </tr>
                                        <% }) %>
                                    <% } else { %>
                                        <tr>
                                        <td colspan="8" class="text-center text-muted py-3">
                                            No tests created yet.
                                        </td>
                                        </tr>
                                    <% } %>
                                    </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Create Test Modal -->
    <div class="modal fade" id="createTestModal" tabindex="-1" aria-labelledby="createTestModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createTestModalLabel">Create New Test</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="testForm">
                        <!-- Basic Test Information -->
                        <div class="row mb-4">
                            <div class="col-md-8">
                                <h6>Test Information</h6>
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">Title *</label>
                                        <input type="text" class="form-control" name="title" required>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">Subject Code *</label>
                                        <input type="text" class="form-control" name="subjectCode" required>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Description</label>
                                    <textarea class="form-control" name="description" rows="3"></textarea>
                                </div>
                                <div class="row">
                                    <div class="col-md-4 mb-3">
                                        <label class="form-label">Time Limit (minutes)</label>
                                        <input type="number" class="form-control" name="timeLimit" min="1">
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label class="form-label">Deadline</label>
                                        <input type="datetime-local" class="form-control" name="deadline">
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label class="form-label">Access *</label>
                                        <select class="form-select" name="access" required>
                                            <option value="Public">Public</option>
                                            <option value="Private" selected>Private</option>
                                        </select>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label class="form-label">How Many Questions Per Student *</label>
                                        <input type="number" class="form-control" name="howManyQuestions" min="1" required>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <h6>Test Summary</h6>
                                <div class="card">
                                    <div class="card-body">
                                        <div class="mb-2">
                                            <strong>Total Questions:</strong>
                                            <span id="totalQuestions">0</span>
                                        </div>
                                        <div class="mb-2">
                                            <strong>Total Points:</strong>
                                            <span id="totalPoints">0</span>
                                        </div>
                                        <div class="mb-2">
                                            <strong>Question Types:</strong>
                                            <div id="questionTypesSummary"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Questions Section -->
                        <div class="mb-4">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h6>Questions</h6>
                                <button type="button" class="btn btn-success btn-sm" onclick="addQuestion()">
                                    <i class="fas fa-plus me-1"></i>Add Question
                                </button>
                            </div>
                            <div id="questionsContainer">
                                <!-- Dynamic question inputs go here -->
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="saveTest()">Save Test</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let questionCount = 0;

        // Question template
        function getQuestionTemplate() {
            questionCount++;
            return `
                <div class="question-item" id="question-${questionCount}">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h6 class="mb-0">Question ${questionCount}</h6>
                        <button type="button" class="btn btn-danger btn-sm" onclick="removeQuestion(${questionCount})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Question *</label>
                        <textarea class="form-control question-text" rows="2" required></textarea>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Type of Question *</label>
                            <select class="form-select question-type" onchange="changeQuestionType(${questionCount})" required>
                                <option value="">Select Type</option>
                                <option value="identification">Identification</option>
                                <option value="multiple">Multiple Choice</option>
                                <option value="enumeration">Enumeration</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Points *</label>
                            <input type="number" class="form-control question-points" min="1" value="1" required>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Files</label>
                            <input type="file" class="form-control question-file" accept="image/*,video/*">
                            <input type="hidden" class="question-file-url">
                            <img class="question-file-preview" style="max-width:200px; display:none;">
                        </div>
                    </div>

                    <!-- Answer Section - Dynamic based on question type -->
                    <div class="question-answer-section" id="answer-section-${questionCount}">
                        <!-- Answer fields will be populated here based on question type -->
                    </div>

                </div>
            `;
        }

        // ✅ Fixed Add Question function
        function addQuestion() {
            const container = document.getElementById('questionsContainer');

            // Create a temporary wrapper to hold the new question HTML
            const wrapper = document.createElement('div');
            wrapper.innerHTML = getQuestionTemplate();

            // Append the new question element safely (no data loss)
            container.appendChild(wrapper.firstElementChild);

            updateTestSummary();
        }


        // Remove question
        function removeQuestion(questionId) {
            const questionElement = document.getElementById(`question-${questionId}`);
            questionElement.remove();
            updateQuestionNumbers();
            updateTestSummary();
        }

        // Update question numbers after removal
        function updateQuestionNumbers() {
            const questions = document.querySelectorAll('.question-item');
            questions.forEach((question, index) => {
                const questionNumber = index + 1;
                question.id = `question-${questionNumber}`;
                const header = question.querySelector('h6');
                header.textContent = `Question ${questionNumber}`;
                
                // Update event handlers
                const typeSelect = question.querySelector('.question-type');
                typeSelect.setAttribute('onchange', `changeQuestionType(${questionNumber})`);
                
                const removeBtn = question.querySelector('.btn-danger');
                removeBtn.setAttribute('onclick', `removeQuestion(${questionNumber})`);
            });
            questionCount = questions.length;
        }

        // Change question type and show appropriate answer fields
        function changeQuestionType(questionId) {
            const questionElement = document.getElementById(`question-${questionId}`);
            const typeSelect = questionElement.querySelector('.question-type');
            const answerSection = document.getElementById(`answer-section-${questionId}`);
            const questionType = typeSelect.value;

            let answerHTML = '';

            switch(questionType) {
                case 'identification':
                    answerHTML = `
                        <label class="form-label">Correct Answer *</label>
                        <input type="text" class="form-control identification-answer" required>
                    `;
                    break;

                case 'multiple':
                    answerHTML = `
                        <label class="form-label">Choices *</label>
                        <div class="choices-container">
                            <div class="choice-item">
                                <div class="input-group">
                                    <span class="input-group-text">A</span>
                                    <input type="text" class="form-control choice-text" placeholder="Choice A" required>
                                    <div class="input-group-text">
                                        <input class="form-check-input correct-choice" type="radio" name="correct-${questionId}" value="A" required>
                                    </div>
                                </div>
                            </div>
                            <div class="choice-item">
                                <div class="input-group">
                                    <span class="input-group-text">B</span>
                                    <input type="text" class="form-control choice-text" placeholder="Choice B" required>
                                    <div class="input-group-text">
                                        <input class="form-check-input correct-choice" type="radio" name="correct-${questionId}" value="B">
                                    </div>
                                </div>
                            </div>
                            <div class="choice-item">
                                <div class="input-group">
                                    <span class="input-group-text">C</span>
                                    <input type="text" class="form-control choice-text" placeholder="Choice C" required>
                                    <div class="input-group-text">
                                        <input class="form-check-input correct-choice" type="radio" name="correct-${questionId}" value="C">
                                    </div>
                                </div>
                            </div>
                            <div class="choice-item">
                                <div class="input-group">
                                    <span class="input-group-text">D</span>
                                    <input type="text" class="form-control choice-text" placeholder="Choice D" required>
                                    <div class="input-group-text">
                                        <input class="form-check-input correct-choice" type="radio" name="correct-${questionId}" value="D">
                                    </div>
                                </div>
                            </div>
                        </div>
                        <button type="button" class="btn btn-outline-secondary btn-sm mt-2" onclick="addChoice(${questionId})">
                            <i class="fas fa-plus me-1"></i>Add Choice
                        </button>
                    `;
                    break;

                case 'enumeration':
                    answerHTML = `
                        <label class="form-label">Accepted Answers *</label>
                        <div class="enumeration-container">
                            <div class="enumeration-item">
                                <input type="text" class="form-control enumeration-answer" placeholder="Answer 1" required>
                            </div>
                            <div class="enumeration-item">
                                <input type="text" class="form-control enumeration-answer" placeholder="Answer 2" required>
                            </div>
                        </div>
                        <button type="button" class="btn btn-outline-secondary btn-sm mt-2" onclick="addEnumerationAnswer(${questionId})">
                            <i class="fas fa-plus me-1"></i>Add Answer
                        </button>
                    `;
                    break;
            }

            answerSection.innerHTML = answerHTML;
        }

        // Add choice for multiple choice questions
        function addChoice(questionId) {
            const choicesContainer = document.querySelector(`#question-${questionId} .choices-container`);
            const choiceCount = choicesContainer.children.length;
            const nextLetter = String.fromCharCode(65 + choiceCount); // A, B, C, etc.

            const choiceHTML = `
                <div class="choice-item">
                    <div class="input-group">
                        <span class="input-group-text">${nextLetter}</span>
                        <input type="text" class="form-control choice-text" placeholder="Choice ${nextLetter}" required>
                        <div class="input-group-text">
                            <input class="form-check-input correct-choice" type="radio" name="correct-${questionId}" value="${nextLetter}">
                        </div>
                        <button type="button" class="btn btn-outline-danger" onclick="this.parentElement.parentElement.remove()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            `;
            choicesContainer.innerHTML += choiceHTML;
        }

        // Add enumeration answer
        function addEnumerationAnswer(questionId) {
            const enumerationContainer = document.querySelector(`#question-${questionId} .enumeration-container`);
            const answerCount = enumerationContainer.children.length + 1;

            const answerHTML = `
                <div class="enumeration-item">
                    <div class="input-group">
                        <input type="text" class="form-control enumeration-answer" placeholder="Answer ${answerCount}" required>
                        <button type="button" class="btn btn-outline-danger" onclick="this.parentElement.parentElement.remove()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            `;
            enumerationContainer.innerHTML += answerHTML;
        }

        // Update test summary
        function updateTestSummary() {
            const totalQuestions = document.querySelectorAll('.question-item').length;
            const totalPoints = Array.from(document.querySelectorAll('.question-points'))
                .reduce((sum, input) => sum + parseInt(input.value || 0), 0);
            
            // Count question types
            const typeCounts = {};
            document.querySelectorAll('.question-type').forEach(select => {
                const type = select.value;
                typeCounts[type] = (typeCounts[type] || 0) + 1;
            });

            document.getElementById('totalQuestions').textContent = totalQuestions;
            document.getElementById('totalPoints').textContent = totalPoints;
            
            const typesSummary = document.getElementById('questionTypesSummary');
            typesSummary.innerHTML = Object.entries(typeCounts)
                .map(([type, count]) => `${type}: ${count}`)
                .join('<br>') || 'No questions added';
        }

        async function uploadQuestionFile(inputElement) {
        const file = inputElement.files[0];
        if (!file) return;

        const formData = new FormData();
        formData.append("file", file);

        try {
            const res = await fetch("/upload", {
                method: "POST",
                body: formData
            });

            const data = await res.json();
            if (res.ok) {
            const url = data.url;
            const container = inputElement.closest(".question-item");

            // Set hidden input
            container.querySelector(".question-file-url").value = url;

            // Show preview if image
            if (file.type.startsWith("image/")) {
                const img = container.querySelector(".question-file-preview");
                img.src = url;
                img.style.display = "block";
            }

            console.log("✅ File uploaded:", url);
            } else {
            alert("❌ Upload failed: " + data.message);
            }
        } catch (err) {
            console.error("❌ Error uploading file:", err);
            alert("Failed to upload file.");
        }
        }

        // Bind change event to all question file inputs
        document.addEventListener("change", (e) => {
        if (e.target.classList.contains("question-file")) {
            uploadQuestionFile(e.target);
        }
        });

        // Save test
        async function saveTest() {
        const form = document.getElementById('testForm');
        if (!form.checkValidity()) { form.reportValidity(); return; }

        const deadlineValue = form.querySelector('[name="deadline"]').value.trim();
        const testData = {
        title: form.querySelector('[name="title"]').value.trim(),
        subjectCode: form.querySelector('[name="subjectCode"]').value.trim(),
        description: form.querySelector('[name="description"]').value.trim(),
        timeLimit: parseInt(form.querySelector('[name="timeLimit"]').value || 0),
        howManyQuestions: parseInt(form.querySelector('[name="howManyQuestions"]').value || 0),
        access: form.querySelector('[name="access"]').value,
        // Only send deadline if user picked a valid date
        deadline: deadlineValue ? deadlineValue : undefined,
        questions: []
        };

        const questionItems = document.querySelectorAll('.question-item');

        for (const q of questionItems) {
        const type = q.querySelector('.question-type').value;
        if (!type) continue;

        const question = {
            text: q.querySelector('.question-text')?.value?.trim() || '',
            type,
            points: parseInt(q.querySelector('.question-points').value) || 1,
            files: []
        };

        // Convert files to Base64 or push file names depending on backend
        // Use uploaded file URL from hidden input
        const fileUrl = q.querySelector('.question-file-url')?.value;
        if (fileUrl) question.files.push(fileUrl);


        if (type === 'identification') question.answer = q.querySelector('.identification-answer')?.value?.trim() || '';
        if (type === 'multiple') {
            const choices = Array.from(q.querySelectorAll('.choice-text')).map(c => c.value.trim());
            const correctChoice = q.querySelector('.correct-choice:checked')?.value;
            question.choices = choices;
            question.correctAnswer = correctChoice;
        }
        if (type === 'enumeration') {
            question.answers = Array.from(q.querySelectorAll('.enumeration-answer')).map(a => a.value.trim());
        }

        if (question.text || question.files.length) testData.questions.push(question);
        }

        console.log('📤 Sending testData with files:', testData);

        // Determine if creating or editing
        const isEdit = form.dataset.mode === 'edit';
        const testId = form.dataset.id;

        const endpoint = isEdit
        ? `/dean/tests/${testId}`
        : '/dean/tests/create';
        const method = isEdit ? 'PUT' : 'POST';

        try {
        const res = await fetch(endpoint, {
            method,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(testData)
        });

        if (res.ok) {
            alert(isEdit ? '✅ Test updated successfully!' : '✅ Test created successfully!');
            window.location.reload();
        } else {
            const err = await res.text();
            alert('❌ Failed: ' + err);
        }

        } catch (err) {
            console.error(err);
            alert('❌ Error connecting to server.');
        }
    }

        // Helper function to convert File -> Base64
        function fileToBase64(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result);
            reader.onerror = reject;
            reader.readAsDataURL(file);
        });
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            updateTestSummary();
        });

        document.addEventListener("DOMContentLoaded", () => {
        const form = document.querySelector("#testForm");
        const modalTitle = document.querySelector("#createTestModalLabel");
        const modal = document.querySelector("#createTestModal");
        const saveBtn = document.querySelector(".modal-footer .btn-primary");

        document.querySelectorAll(".edit-test").forEach(btn => {
        btn.addEventListener("click", async () => {
            const testId = btn.dataset.id;

            modalTitle.textContent = "Edit Test";
            saveBtn.textContent = "Update Test";
            form.dataset.mode = "edit";
            form.dataset.id = testId;

            const res = await fetch(`/dean/tests/${testId}`);
            if (!res.ok) {
                alert("Failed to fetch test details.");
                return;
            }

            const test = await res.json();

            // Populate top-level test fields
            form.querySelector("[name='title']").value = test.title || "";
            form.querySelector("[name='subjectCode']").value = test.subjectCode || "";
            form.querySelector("[name='description']").value = test.description || "";
            form.querySelector("[name='access']").value = test.access || "Private";
            form.querySelector("[name='timeLimit']").value = test.timeLimit || "";
            form.querySelector("[name='howManyQuestions']").value = test.howManyQuestions || "";
            form.querySelector("[name='deadline']").value = test.deadline
            ? new Date(test.deadline).toISOString().slice(0, 16)
            : "";

            // Clear existing questions
            const container = document.getElementById("questionsContainer");
            container.innerHTML = "";
            questionCount = 0;

            // Rebuild questions dynamically
            test.questions?.forEach(q => {
                addQuestion(); // safely increments questionCount and appends question

                const currentQ = container.lastElementChild;
                currentQ.querySelector(".question-text").value = q.text || "";
                currentQ.querySelector(".question-points").value = q.points || 1;
                currentQ.querySelector(".question-type").value = q.type || "";

                changeQuestionType(questionCount);

                // ✅ Populate existing file if present
                if (q.files && q.files.length > 0) {
                    const fileUrl = q.files[0]; // assuming 1 file per question
                    const img = currentQ.querySelector(".question-file-preview");
                    const hiddenInput = currentQ.querySelector(".question-file-url");
                    hiddenInput.value = fileUrl;

                    // Only show if image
                    if (fileUrl.match(/\.(jpeg|jpg|png|gif|webp)$/i)) {
                        img.src = fileUrl;
                        img.style.display = "block";
                    }
                }

                if (q.type === "identification") {
                currentQ.querySelector(".identification-answer").value = q.answer || "";
            }

                if (q.type === "multiple") {
                    const choicesContainer = currentQ.querySelector(".choices-container");
                    choicesContainer.innerHTML = ""; // clear default choices

                    q.choices?.forEach((choice, i) => {
                        const letter = String.fromCharCode(65 + i); // A, B, C...
                        const choiceHTML = `
                            <div class="choice-item">
                                <div class="input-group">
                                    <span class="input-group-text">${letter}</span>
                                    <input type="text" class="form-control choice-text" placeholder="Choice ${letter}" value="${choice}" required>
                                    <div class="input-group-text">
                                        <input class="form-check-input correct-choice" type="radio" name="correct-${questionCount}" value="${letter}" ${q.correctAnswer === letter ? "checked" : ""}>
                                    </div>
                                    <button type="button" class="btn btn-outline-danger" onclick="this.parentElement.parentElement.remove()">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                        `;
                        choicesContainer.innerHTML += choiceHTML;
                    });
                }

                if (q.type === "enumeration") {
                    const enumContainer = currentQ.querySelector(".enumeration-container");
                    enumContainer.innerHTML = ""; // clear default

                    q.answers?.forEach((ans, i) => {
                        const answerHTML = `
                            <div class="enumeration-item">
                                <div class="input-group">
                                    <input type="text" class="form-control enumeration-answer" value="${ans}"async function saveTest() { placeholder="Answer ${i+1}" required>
                                    <button type="button" class="btn btn-outline-danger" onclick="this.parentElement.parentElement.remove()">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                        `;
                        enumContainer.innerHTML += answerHTML;
                    });
                }
            });

            updateTestSummary();
            new bootstrap.Modal(modal).show();
        });
    });


  modal.addEventListener("hidden.bs.modal", () => {
    form.reset();
    document.getElementById("questionsContainer").innerHTML = "";
    questionCount = 0;
    form.removeAttribute("data-mode");
    form.removeAttribute("data-id");
    modalTitle.textContent = "Create New Test";
    saveBtn.textContent = "Save Test";
  });
});

    
    </script>
</body>
</html>

<!-- Add New Textbox To Fill Out
How Many Questions Per Student 
Saves The Integer In The Database
-->