<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - Test Bank System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .navbar.navbar-expand-lg.navbar-dark {
            background: linear-gradient(135deg, #001a8f 0%, #d4cc26 100%) !important;
        }
        .test-card {
            transition: transform 0.2s;
            border-left: 4px solid #0d6efd;
        }
        .test-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .expandable-row {
            background-color: #f8f9fa;
        }
        .question-item {
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            background: #f8f9fa;
        }
        .student-list {
            height: 300px;
            overflow-y: auto;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
        }
        .student-item {
            padding: 0.5rem;
            border-bottom: 1px solid #dee2e6;
            cursor: pointer;
        }
        .student-item:hover {
            background-color: #f8f9fa;
        }
        .student-item.selected {
            background-color: #e7f1ff;
            border-left: 4px solid #0d6efd;
        }
        .transfer-buttons {
            display: flex;
            flex-direction: column;
            justify-content: center;
            gap: 10px;
        }
        .section-badge {
            cursor: pointer;
            margin: 2px;
        }
        .dropdown-toggle::after {
            display: none;
        }
        .choice-item, .answer-item {
            margin-bottom: 10px;
            padding: 10px;
            border: 1px solid #dee2e6;
            border-radius: 5px;
            background: white;
        }
        .file-preview {
            max-width: 100px;
            max-height: 100px;
            margin: 5px;
            border-radius: 4px;
        }
        .feedback-section {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin-top: 10px;
        }
        .test-title-link {
            color: #0d6efd;
            cursor: pointer;
            text-decoration: none;
        }
        .test-title-link:hover {
            text-decoration: underline;
        }
        .assigned-sections {
            max-width: 200px;
        }
    </style>
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="#">
                <i class="fas fa-graduation-cap me-2"></i>Test Bank System
            </a>
            <div class="navbar-nav ms-auto">
                <span class="navbar-text me-3">
                    Welcome, <%= user ? user.fullName : "Dean User" %> (Dean)
                </span>
                <form action="/auth/logout" method="POST" class="d-inline">
                    <button type="submit" class="btn btn-outline-light btn-sm">Logout</button>
                </form>
            </div>
        </div>
    </nav>

    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <nav class="col-md-3 col-lg-2 d-md-block bg-light sidebar">
                <div class="position-sticky pt-3">
                    <ul class="nav flex-column">
                        <li class="nav-item">
                            <a class="nav-link" href="/dean/dashboard">
                                <i class="fas fa-tachometer-alt me-2"></i>Dashboard
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/dean/manage-accounts">
                                <i class="fas fa-users-cog me-2"></i>Manage Accounts
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/dean/sections">
                                <i class="fas fa-layer-group me-2"></i>Sections
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/dean/tests">
                                <i class="fas fa-file-alt me-2"></i>Test Management
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link active" href="/dean/test-static">
                                <i class="fas fa-file-alt me-2"></i>Test Static
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/dean/student-performance">
                                <i class="fas fa-chart-line me-2"></i>Student Performance
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/dean/reports">
                                <i class="fas fa-chart-bar me-2"></i>Reports & Analytics
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/dean/account">
                                <i class="fas fa-user-cog me-2"></i>My Account
                            </a>
                        </li>
                    </ul>
                </div>
            </nav>

            <!-- Main content -->
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
                <!-- Header -->
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                    <h1 class="h2">
                        <i class="fas fa-file-alt me-2"></i><%= title %>
                    </h1>
                    <div class="btn-toolbar mb-2 mb-md-0">
                        <button class="btn btn-primary me-2" data-bs-toggle="modal" data-bs-target="#createTestModal">
                            <i class="fas fa-plus me-2"></i>Create Test
                        </button>
                        <button class="btn btn-outline-secondary" id="toggleAllSections">
                            <i class="fas fa-expand me-2"></i>Show Assigned Sections
                        </button>
                    </div>
                </div>

                <!-- Search Bar -->
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-8">
                                <input type="text" class="form-control" id="testSearch" placeholder="Search tests by title, subject code, or description...">
                            </div>
                            <div class="col-md-4">
                                <select class="form-select" id="testFilter">
                                    <option value="">All Tests</option>
                                    <option value="Public">Public Tests</option>
                                    <option value="Private">Private Tests</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Dynamic Overview Cards -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="card text-white bg-primary">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h4 id="totalTestsCount">0</h4>
                                        <p>Total Tests</p>
                                    </div>
                                    <i class="fas fa-file-alt fa-2x"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-white bg-success">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h4 id="publicTestsCount">0</h4>
                                        <p>Public Tests</p>
                                    </div>
                                    <i class="fas fa-unlock fa-2x"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-white bg-warning">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h4 id="privateTestsCount">0</h4>
                                        <p>Private Tests</p>
                                    </div>
                                    <i class="fas fa-lock fa-2x"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-white bg-info">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h4 id="activeTestsCount">0</h4>
                                        <p>Active Tests</p>
                                    </div>
                                    <i class="fas fa-play-circle fa-2x"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Dynamic Tests Table -->
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">All Tests</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped align-middle">
                                <thead>
                                    <tr>
                                        <th style="width: 25%">Title</th>
                                        <th style="width: 10%">Subject Code</th>
                                        <th style="width: 8%">Access</th>
                                        <th style="width: 15%">Assigned</th>
                                        <th style="width: 10%">Created By</th>
                                        <th style="width: 12%">Created/Updated</th>
                                        <th style="width: 10%">Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="testsTableBody">
                                    <!-- Tests will be populated dynamically -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Create Test Modal -->
    <div class="modal fade" id="createTestModal" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create New Test</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="testForm">
                        <!-- Basic Test Information -->
                        <div class="row mb-4">
                            <div class="col-md-8">
                                <h6>Test Information</h6>
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">Title *</label>
                                        <input type="text" class="form-control" name="title" required>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">Subject Code *</label>
                                        <input type="text" class="form-control" name="subjectCode" required>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Description</label>
                                    <textarea class="form-control" name="description" rows="3"></textarea>
                                </div>
                                <div class="row">
                                    <div class="col-md-4 mb-3">
                                        <label class="form-label">Time Limit (minutes)</label>
                                        <input type="number" class="form-control" name="timeLimit" min="1" value="60">
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label class="form-label">Deadline</label>
                                        <input type="datetime-local" class="form-control" name="deadline">
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label class="form-label">Access *</label>
                                        <select class="form-select" name="access" required>
                                            <option value="Public">Public</option>
                                            <option value="Private" selected>Private</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">How Many Questions Per Student *</label>
                                    <input type="number" class="form-control" name="howManyQuestions" min="1" value="10" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Passing Points</label>
                                    <input type="number" class="form-control" name="passingPoints" min="0" value="0">
                                </div>
                                <div class="mb-3">
                                    <button type="button" class="btn btn-outline-primary me-2" data-bs-toggle="modal" data-bs-target="#assignSectionsModal">
                                        <i class="fas fa-users me-1"></i>Assign Sections
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#prerequisitesModal">
                                        <i class="fas fa-list-check me-1"></i>Set Prerequisites
                                    </button>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <h6>Test Summary</h6>
                                <div class="card">
                                    <div class="card-body">
                                        <div class="mb-2">
                                            <strong>Total Questions:</strong>
                                            <span id="totalQuestions">0</span>
                                        </div>
                                        <div class="mb-2">
                                            <strong>Total Points:</strong>
                                            <span id="totalPoints">0</span>
                                        </div>
                                        <div class="mb-2">
                                            <strong>Passing Points:</strong>
                                            <span id="passingPointsDisplay">0</span>
                                        </div>
                                        <div class="mb-2">
                                            <strong>Question Types:</strong>
                                            <div id="questionTypesSummary"></div>
                                        </div>
                                        <div class="mb-2">
                                            <strong>Assigned Sections:</strong>
                                            <div id="assignedSectionsSummary">None</div>
                                        </div>
                                        <div class="mb-2">
                                            <strong>Prerequisites:</strong>
                                            <div id="prerequisitesSummary">None</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Questions Section -->
                        <div class="mb-4">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h6>Questions</h6>
                                <button type="button" class="btn btn-success btn-sm" onclick="addQuestion()">
                                    <i class="fas fa-plus me-1"></i>Add Question
                                </button>
                            </div>
                            <div id="questionsContainer">
                                <!-- Questions will be added here dynamically -->
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="createTest()">Save Test</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Test Details Modal -->
    <div class="modal fade" id="testDetailsModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Test Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="testDetailsContent">
                    <!-- Content will be populated dynamically -->
                </div>
            </div>
        </div>
    </div>

    <!-- Assign Sections Modal -->
    <div class="modal fade" id="assignSectionsModal" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Assign Sections to Test</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <!-- Available Sections -->
                        <div class="col-md-5">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">Available Sections</h6>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <input type="text" class="form-control" id="availableSectionSearch" placeholder="Search sections...">
                                    </div>
                                    <div class="student-list" id="availableSections">
                                        <!-- Available sections will be populated here -->
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Transfer Buttons -->
                        <div class="col-md-2 transfer-buttons">
                            <button class="btn btn-primary" id="addToTest">
                                <i class="fas fa-arrow-right"></i><br>
                                Add to Test
                            </button>
                            <button class="btn btn-outline-primary" id="removeFromTest">
                                <i class="fas fa-arrow-left"></i><br>
                                Remove
                            </button>
                        </div>

                        <!-- Assigned Sections -->
                        <div class="col-md-5">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">Assigned Sections</h6>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <input type="text" class="form-control" id="assignedSectionSearch" placeholder="Search sections...">
                                    </div>
                                    <div class="student-list" id="assignedSections">
                                        <!-- Assigned sections will be populated here -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveSectionAssignment">Save Assignment</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Prerequisites Modal -->
    <div class="modal fade" id="prerequisitesModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Set Test Prerequisites</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        Students must complete these tests before they can take the current test.
                    </div>
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">Available Tests</h6>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <input type="text" class="form-control" id="prerequisiteSearch" placeholder="Search tests...">
                            </div>
                            <div class="student-list" id="availablePrerequisites">
                                <!-- Available tests will be populated here -->
                            </div>
                        </div>
                    </div>
                    <div class="card mt-3">
                        <div class="card-header">
                            <h6 class="mb-0">Selected Prerequisites</h6>
                        </div>
                        <div class="card-body">
                            <div id="selectedPrerequisites">
                                <!-- Selected prerequisites will be shown here -->
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="savePrerequisites">Save Prerequisites</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Static sample data
        const staticTests = [
            {
                _id: "1",
                title: "Midterm Examination",
                subjectCode: "CS101",
                description: "Comprehensive midterm exam covering all topics",
                access: "Private",
                timeLimit: 120,
                deadline: "2025-03-15T23:59:00",
                howManyQuestions: 50,
                passingPoints: 60,
                createdByName: "Dr. Smith",
                createdAt: new Date('2025-01-15'),
                updatedAt: new Date('2025-01-20'),
                questions: [
                    {
                        text: "What is the time complexity of binary search?",
                        type: "multiple",
                        points: 5,
                        choices: ["O(1)", "O(n)", "O(log n)", "O(n²)"],
                        correctAnswer: "O(log n)"
                    },
                    {
                        text: "Explain the concept of polymorphism in OOP.",
                        type: "identification",
                        points: 10,
                        answer: "Polymorphism allows objects of different types to be treated as objects of a common type"
                    },
                    {
                        text: "List three main principles of Object-Oriented Programming.",
                        type: "enumeration",
                        points: 15,
                        answers: ["Encapsulation", "Inheritance", "Polymorphism"]
                    }
                ],
                assignedSections: ["BSIT3-A", "BSCS2-B"],
                prerequisites: []
            },
            {
                _id: "2",
                title: "Programming Fundamentals Quiz",
                subjectCode: "IT102",
                description: "Basic programming concepts and syntax",
                access: "Public",
                timeLimit: 60,
                deadline: "2025-02-28T23:59:00",
                howManyQuestions: 30,
                passingPoints: 50,
                createdByName: "Dr. Johnson",
                createdAt: new Date('2025-01-10'),
                updatedAt: new Date('2025-01-12'),
                questions: [
                    {
                        text: "Which data structure uses LIFO principle?",
                        type: "multiple",
                        points: 5,
                        choices: ["Queue", "Stack", "Array", "Linked List"],
                        correctAnswer: "Stack"
                    },
                    {
                        text: "What does HTML stand for?",
                        type: "identification",
                        points: 5,
                        answer: "HyperText Markup Language"
                    },
                    {
                        text: "Name two programming paradigms.",
                        type: "enumeration",
                        points: 10,
                        answers: ["Object-Oriented", "Functional"]
                    }
                ],
                assignedSections: ["BSIS1-C"],
                prerequisites: ["1"]
            },
            {
                _id: "3",
                title: "Database Management Final",
                subjectCode: "DBMS301",
                description: "Final examination for Database Management course",
                access: "Private",
                timeLimit: 180,
                deadline: "2025-05-20T23:59:00",
                howManyQuestions: 75,
                passingPoints: 70,
                createdByName: "Dr. Williams",
                createdAt: new Date('2025-03-01'),
                updatedAt: new Date('2025-03-10'),
                questions: [
                    {
                        text: "What is the purpose of a primary key in a database?",
                        type: "multiple",
                        points: 5,
                        choices: [
                            "To improve query performance",
                            "To uniquely identify each record in a table",
                            "To establish relationships between tables",
                            "To store large binary data"
                        ],
                        correctAnswer: "To uniquely identify each record in a table"
                    },
                    {
                        text: "Explain the concept of database normalization.",
                        type: "essay",
                        points: 20,
                        expectedAnswer: "Database normalization is the process of organizing data in a database to reduce redundancy and improve data integrity."
                    }
                ],
                assignedSections: ["BSIT3-A", "BSIT4-D", "BSCS3-E"],
                prerequisites: ["1", "2"]
            }
        ];

        const staticSections = [
            { id: "1", name: "BSIT3-A", course: "BSIT", year: "3", students: 45 },
            { id: "2", name: "BSCS2-B", course: "BSCS", year: "2", students: 38 },
            { id: "3", name: "BSIS1-C", course: "BSIS", year: "1", students: 42 },
            { id: "4", name: "BSIT4-D", course: "BSIT", year: "4", students: 35 },
            { id: "5", name: "BSCS3-E", course: "BSCS", year: "3", students: 40 }
        ];

        let allTests = [...staticTests];
        let showAllSections = false;
        let currentTestForAssignment = null;
        let selectedAvailableSections = [];
        let selectedAssignedSections = [];
        let questionCount = 0;
        let selectedPrerequisites = [];

        // Render tests table
        function renderTestsTable() {
            const tableBody = document.getElementById('testsTableBody');
            tableBody.innerHTML = '';

            allTests.forEach(test => {
                const row = document.createElement('tr');
                
                // Format assigned sections
                const assignedSections = test.assignedSections && test.assignedSections.length > 0 
                    ? test.assignedSections.map(s => `<span class="badge bg-secondary">${s}</span>`).join(' ')
                    : '<span class="text-muted">None</span>';
                
                // Format dates
                const createdDate = test.createdAt ? test.createdAt.toLocaleDateString() : 'N/A';
                const updatedDate = test.updatedAt ? test.updatedAt.toLocaleDateString() : 'N/A';
                
                row.innerHTML = `
                    <td>
                        <a class="test-title-link" onclick="viewTestDetails('${test._id}')">${test.title}</a>
                    </td>
                    <td>${test.subjectCode}</td>
                    <td>
                        <span class="badge ${test.access === 'Public' ? 'bg-success' : 'bg-warning'}">
                            ${test.access}
                        </span>
                    </td>
                    <td class="assigned-sections">${assignedSections}</td>
                    <td>${test.createdByName}</td>
                    <td>
                        <small>Created: ${createdDate}</small><br>
                        <small>Updated: ${updatedDate}</small>
                    </td>
                    <td>
                        <div class="dropdown">
                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                <i class="fas fa-ellipsis-v"></i>
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="#" onclick="duplicateTest('${test._id}')"><i class="fas fa-copy me-2"></i>Duplicate</a></li>
                                <li><a class="dropdown-item" href="#" onclick="assignTest('${test._id}')"><i class="fas fa-users me-2"></i>Assign</a></li>
                                <li><a class="dropdown-item" href="#" onclick="editTest('${test._id}')"><i class="fas fa-edit me-2"></i>Edit</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item text-danger" href="#" onclick="deleteTest('${test._id}')"><i class="fas fa-trash me-2"></i>Delete</a></li>
                            </ul>
                        </div>
                    </td>
                `;
                
                tableBody.appendChild(row);
            });
        }

        // View test details
        function viewTestDetails(testId) {
            const test = allTests.find(t => t._id === testId);
            if (!test) return;

            let questionsHTML = '';
            test.questions.forEach((q, index) => {
                questionsHTML += `
                    <div class="question-item mb-3">
                        <h6>Question ${index + 1} (${q.points} points)</h6>
                        <p><strong>${q.text}</strong></p>
                        <div class="ms-3">
                `;
                
                if (q.type === 'multiple') {
                    questionsHTML += '<p><strong>Choices:</strong></p><ul>';
                    q.choices.forEach(choice => {
                        const isCorrect = choice === q.correctAnswer;
                        questionsHTML += `<li>${choice} ${isCorrect ? '<span class="badge bg-success">Correct</span>' : ''}</li>`;
                    });
                    questionsHTML += '</ul>';
                } else if (q.type === 'identification') {
                    questionsHTML += `<p><strong>Answer:</strong> ${q.answer}</p>`;
                } else if (q.type === 'enumeration') {
                    questionsHTML += '<p><strong>Answers:</strong></p><ul>';
                    q.answers.forEach(answer => {
                        questionsHTML += `<li>${answer}</li>`;
                    });
                    questionsHTML += '</ul>';
                } else if (q.type === 'essay') {
                    questionsHTML += `<p><strong>Expected Answer:</strong> ${q.expectedAnswer || 'N/A'}</p>`;
                }
                
                questionsHTML += `
                        </div>
                    </div>
                `;
            });

            const assignedSections = test.assignedSections && test.assignedSections.length > 0 
                ? test.assignedSections.map(s => `<span class="badge bg-secondary me-1">${s}</span>`).join('')
                : '<span class="text-muted">None</span>';

            const prerequisites = test.prerequisites && test.prerequisites.length > 0
                ? test.prerequisites.map(p => {
                    const prereqTest = allTests.find(t => t._id === p);
                    return prereqTest ? `<span class="badge bg-info me-1">${prereqTest.title}</span>` : '';
                }).join('')
                : '<span class="text-muted">None</span>';

            document.getElementById('testDetailsContent').innerHTML = `
                <div class="row">
                    <div class="col-md-8">
                        <h4>${test.title}</h4>
                        <p class="text-muted">${test.description}</p>
                        
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <strong>Subject Code:</strong> ${test.subjectCode}
                            </div>
                            <div class="col-md-4">
                                <strong>Access:</strong> <span class="badge ${test.access === 'Public' ? 'bg-success' : 'bg-warning'}">${test.access}</span>
                            </div>
                            <div class="col-md-4">
                                <strong>Time Limit:</strong> ${test.timeLimit} minutes
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <strong>Questions Per Student:</strong> ${test.howManyQuestions}
                            </div>
                            <div class="col-md-4">
                                <strong>Passing Points:</strong> ${test.passingPoints}
                            </div>
                            <div class="col-md-4">
                                <strong>Deadline:</strong> ${test.deadline ? new Date(test.deadline).toLocaleString() : 'None'}
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <strong>Assigned Sections:</strong><br>
                            ${assignedSections}
                        </div>
                        
                        <div class="mb-3">
                            <strong>Prerequisites:</strong><br>
                            ${prerequisites}
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-body">
                                <h6>Test Summary</h6>
                                <p><strong>Total Questions:</strong> ${test.questions.length}</p>
                                <p><strong>Total Points:</strong> ${test.questions.reduce((sum, q) => sum + q.points, 0)}</p>
                                <p><strong>Created By:</strong> ${test.createdByName}</p>
                                <p><strong>Created:</strong> ${test.createdAt.toLocaleDateString()}</p>
                                <p><strong>Last Updated:</strong> ${test.updatedAt.toLocaleDateString()}</p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <hr>
                
                <h5>Questions</h5>
                ${questionsHTML}
            `;

            const modal = new bootstrap.Modal(document.getElementById('testDetailsModal'));
            modal.show();
        }

        // Duplicate test
        function duplicateTest(testId) {
            const test = allTests.find(t => t._id === testId);
            if (!test) return;

            const duplicatedTest = {
                ...test,
                _id: Date.now().toString(),
                title: `${test.title} (Copy)`,
                createdAt: new Date(),
                updatedAt: new Date()
            };

            allTests.push(duplicatedTest);
            renderTestsTable();
            updateOverviewCards();
            alert('Test duplicated successfully!');
        }

        // Assign test to sections
        function assignTest(testId) {
            currentTestForAssignment = testId;
            const modal = new bootstrap.Modal(document.getElementById('assignSectionsModal'));
            modal.show();
            populateSectionAssignment();
        }

        // Edit test
        function editTest(testId) {
            alert(`Edit functionality for test ${testId} would be implemented here`);
            // In a real implementation, this would populate the create test modal with existing data
        }

        // Delete test
        function deleteTest(testId) {
            if (confirm('Are you sure you want to delete this test? This action cannot be undone.')) {
                allTests = allTests.filter(t => t._id !== testId);
                renderTestsTable();
                updateOverviewCards();
                alert('Test deleted successfully!');
            }
        }

        // Update overview cards
        function updateOverviewCards() {
            const totalTests = allTests.length;
            const publicTests = allTests.filter(t => t.access === 'Public').length;
            const privateTests = allTests.filter(t => t.access === 'Private').length;
            const activeTests = allTests.filter(t => 
                !t.deadline || new Date(t.deadline) > new Date()
            ).length;

            document.getElementById('totalTestsCount').textContent = totalTests;
            document.getElementById('publicTestsCount').textContent = publicTests;
            document.getElementById('privateTestsCount').textContent = privateTests;
            document.getElementById('activeTestsCount').textContent = activeTests;
        }

        // Populate section assignment
        function populateSectionAssignment() {
            const test = allTests.find(t => t._id === currentTestForAssignment);
            if (!test) return;

            const availableSections = staticSections.filter(s => 
                !test.assignedSections || !test.assignedSections.includes(s.name)
            );
            const assignedSections = staticSections.filter(s => 
                test.assignedSections && test.assignedSections.includes(s.name)
            );

            // Populate available sections
            const availableContainer = document.getElementById('availableSections');
            availableContainer.innerHTML = '';
            availableSections.forEach(section => {
                const sectionElement = document.createElement('div');
                sectionElement.className = 'student-item';
                sectionElement.innerHTML = `
                    <div class="form-check">
                        <input class="form-check-input section-checkbox" type="checkbox" value="${section.name}" id="available-${section.id}">
                        <label class="form-check-label" for="available-${section.id}">
                            ${section.name} (${section.course} - Year ${section.year})
                        </label>
                    </div>
                `;
                availableContainer.appendChild(sectionElement);
            });

            // Populate assigned sections
            const assignedContainer = document.getElementById('assignedSections');
            assignedContainer.innerHTML = '';
            assignedSections.forEach(section => {
                const sectionElement = document.createElement('div');
                sectionElement.className = 'student-item';
                sectionElement.innerHTML = `
                    <div class="form-check">
                        <input class="form-check-input section-checkbox" type="checkbox" value="${section.name}" id="assigned-${section.id}">
                        <label class="form-check-label" for="assigned-${section.id}">
                            ${section.name} (${section.course} - Year ${section.year})
                        </label>
                    </div>
                `;
                assignedContainer.appendChild(sectionElement);
            });

            // Set up event listeners for checkboxes
            document.querySelectorAll('.section-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    if (this.checked) {
                        if (this.closest('#availableSections')) {
                            selectedAvailableSections.push(this.value);
                        } else {
                            selectedAssignedSections.push(this.value);
                        }
                    } else {
                        if (this.closest('#availableSections')) {
                            selectedAvailableSections = selectedAvailableSections.filter(s => s !== this.value);
                        } else {
                            selectedAssignedSections = selectedAssignedSections.filter(s => s !== this.value);
                        }
                    }
                });
            });
        }

        // Save section assignment
        document.getElementById('saveSectionAssignment').addEventListener('click', function() {
            const test = allTests.find(t => t._id === currentTestForAssignment);
            if (!test) return;

            // Add newly selected sections
            selectedAvailableSections.forEach(section => {
                if (!test.assignedSections) test.assignedSections = [];
                if (!test.assignedSections.includes(section)) {
                    test.assignedSections.push(section);
                }
            });

            // Remove unselected sections
            selectedAssignedSections.forEach(section => {
                if (test.assignedSections) {
                    test.assignedSections = test.assignedSections.filter(s => s !== section);
                }
            });

            test.updatedAt = new Date();
            renderTestsTable();
            
            const modal = bootstrap.Modal.getInstance(document.getElementById('assignSectionsModal'));
            modal.hide();
            
            selectedAvailableSections = [];
            selectedAssignedSections = [];
            
            alert('Section assignment updated successfully!');
        });

        // Add to test button
        document.getElementById('addToTest').addEventListener('click', function() {
            selectedAvailableSections.forEach(section => {
                const sectionElement = document.querySelector(`#availableSections input[value="${section}"]`);
                if (sectionElement) {
                    sectionElement.checked = false;
                    const sectionItem = sectionElement.closest('.student-item');
                    document.getElementById('assignedSections').appendChild(sectionItem);
                }
            });
            selectedAvailableSections = [];
        });

        // Remove from test button
        document.getElementById('removeFromTest').addEventListener('click', function() {
            selectedAssignedSections.forEach(section => {
                const sectionElement = document.querySelector(`#assignedSections input[value="${section}"]`);
                if (sectionElement) {
                    sectionElement.checked = false;
                    const sectionItem = sectionElement.closest('.student-item');
                    document.getElementById('availableSections').appendChild(sectionItem);
                }
            });
            selectedAssignedSections = [];
        });

        // Set up prerequisites
        document.getElementById('savePrerequisites').addEventListener('click', function() {
            const test = allTests.find(t => t._id === currentTestForAssignment);
            if (!test) return;

            test.prerequisites = [...selectedPrerequisites];
            test.updatedAt = new Date();
            
            updatePrerequisitesSummary();
            
            const modal = bootstrap.Modal.getInstance(document.getElementById('prerequisitesModal'));
            modal.hide();
            
            alert('Prerequisites updated successfully!');
        });

        // Update prerequisites summary
        function updatePrerequisitesSummary() {
            const test = allTests.find(t => t._id === currentTestForAssignment);
            if (!test) return;

            const summaryElement = document.getElementById('prerequisitesSummary');
            if (test.prerequisites && test.prerequisites.length > 0) {
                const prereqNames = test.prerequisites.map(p => {
                    const prereqTest = allTests.find(t => t._id === p);
                    return prereqTest ? prereqTest.title : 'Unknown Test';
                });
                summaryElement.innerHTML = prereqNames.join('<br>');
            } else {
                summaryElement.innerHTML = 'None';
            }
        }

        // Question template
        function getQuestionTemplate() {
            questionCount++;
            return `
                <div class="question-item" id="question-${questionCount}">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h6 class="mb-0">Question ${questionCount}</h6>
                        <button type="button" class="btn btn-danger btn-sm" onclick="removeQuestion(${questionCount})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Question *</label>
                        <textarea class="form-control question-text" rows="2" required placeholder="Enter your question here..."></textarea>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label class="form-label">Type of Question *</label>
                            <select class="form-select question-type" onchange="changeQuestionType(${questionCount})" required>
                                <option value="">Select Type</option>
                                <option value="multiple">Multiple Choice</option>
                                <option value="truefalse">True or False</option>
                                <option value="enumeration">Enumeration</option>
                                <option value="identification">Identification</option>
                                <option value="essay">Essay</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Points Value *</label>
                            <input type="number" class="form-control question-points" min="1" value="1" required>
                        </div>
                        <div class="col-md-5">
                            <label class="form-label">Attach File (Optional)</label>
                            <input type="file" class="form-control question-file" accept="image/*,video/*,audio/*,.pdf,.doc,.docx">
                            <div class="question-file-preview mt-2"></div>
                        </div>
                    </div>

                    <!-- Answer Section - Dynamic based on question type -->
                    <div class="question-answer-section" id="answer-section-${questionCount}">
                        <!-- Answer fields will be populated here based on question type -->
                    </div>

                    <!-- Feedback Section -->
                    <div class="feedback-section">
                        <h6>Feedback (Optional)</h6>
                        <div class="row">
                            <div class="col-md-6">
                                <label class="form-label">When Correct</label>
                                <textarea class="form-control feedback-correct" rows="2" placeholder="Feedback when answer is correct..."></textarea>
                                <input type="file" class="form-control mt-2 feedback-correct-file" accept="image/*,video/*,audio/*,.pdf,.doc,.docx">
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">When Incorrect</label>
                                <textarea class="form-control feedback-incorrect" rows="2" placeholder="Feedback when answer is incorrect..."></textarea>
                                <input type="file" class="form-control mt-2 feedback-incorrect-file" accept="image/*,video/*,audio/*,.pdf,.doc,.docx">
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        // Add question
        function addQuestion() {
            const container = document.getElementById('questionsContainer');
            const wrapper = document.createElement('div');
            wrapper.innerHTML = getQuestionTemplate();
            container.appendChild(wrapper.firstElementChild);
            updateTestSummary();
        }

        // Remove question
        function removeQuestion(questionId) {
            const questionElement = document.getElementById(`question-${questionId}`);
            questionElement.remove();
            updateQuestionNumbers();
            updateTestSummary();
        }

        // Update question numbers after removal
        function updateQuestionNumbers() {
            const questions = document.querySelectorAll('.question-item');
            questions.forEach((question, index) => {
                const questionNumber = index + 1;
                question.id = `question-${questionNumber}`;
                const header = question.querySelector('h6');
                header.textContent = `Question ${questionNumber}`;
                
                const typeSelect = question.querySelector('.question-type');
                typeSelect.setAttribute('onchange', `changeQuestionType(${questionNumber})`);
                
                const removeBtn = question.querySelector('.btn-danger');
                removeBtn.setAttribute('onclick', `removeQuestion(${questionNumber})`);
            });
            questionCount = questions.length;
        }

        // Change question type and show appropriate answer fields
        function changeQuestionType(questionId) {
            const questionElement = document.getElementById(`question-${questionId}`);
            const typeSelect = questionElement.querySelector('.question-type');
            const answerSection = document.getElementById(`answer-section-${questionId}`);
            const questionType = typeSelect.value;

            let answerHTML = '';

            switch(questionType) {
                case 'multiple':
                    answerHTML = `
                        <h6>Multiple Choice Answers</h6>
                        <div class="choices-container">
                            <div class="choice-item">
                                <div class="input-group">
                                    <span class="input-group-text">A</span>
                                    <input type="text" class="form-control choice-text" placeholder="Choice A" required>
                                    <div class="input-group-text">
                                        <input class="form-check-input correct-choice" type="checkbox" value="A">
                                    </div>
                                    <button type="button" class="btn btn-outline-danger" onclick="this.parentElement.parentElement.remove()">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="choice-item">
                                <div class="input-group">
                                    <span class="input-group-text">B</span>
                                    <input type="text" class="form-control choice-text" placeholder="Choice B" required>
                                    <div class="input-group-text">
                                        <input class="form-check-input correct-choice" type="checkbox" value="B">
                                    </div>
                                    <button type="button" class="btn btn-outline-danger" onclick="this.parentElement.parentElement.remove()">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        <button type="button" class="btn btn-outline-secondary btn-sm mt-2" onclick="addChoice(${questionId})">
                            <i class="fas fa-plus me-1"></i>Add Choice
                        </button>
                    `;
                    break;

                case 'truefalse':
                    answerHTML = `
                        <h6>True or False</h6>
                        <div class="choices-container">
                            <div class="choice-item">
                                <div class="form-check">
                                    <input class="form-check-input correct-choice" type="radio" name="correct-${questionId}" value="True" required>
                                    <label class="form-check-label">True</label>
                                </div>
                            </div>
                            <div class="choice-item">
                                <div class="form-check">
                                    <input class="form-check-input correct-choice" type="radio" name="correct-${questionId}" value="False">
                                    <label class="form-check-label">False</label>
                                </div>
                            </div>
                        </div>
                    `;
                    break;

                case 'enumeration':
                    answerHTML = `
                        <h6>Enumeration Answers</h6>
                        <div class="mb-3">
                            <label class="form-label">Number of Answers Required</label>
                            <input type="number" class="form-control enumeration-required" min="1" value="1">
                        </div>
                        <div class="enumeration-container">
                            <div class="answer-item">
                                <div class="input-group">
                                    <input type="text" class="form-control enumeration-answer" placeholder="Answer 1" required>
                                    <div class="input-group-text">
                                        <input class="form-check-input case-sensitive" type="checkbox">
                                        <small class="ms-1">Case Sensitive</small>
                                    </div>
                                    <button type="button" class="btn btn-outline-danger" onclick="this.parentElement.parentElement.remove()">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="answer-item">
                                <div class="input-group">
                                    <input type="text" class="form-control enumeration-answer" placeholder="Answer 2" required>
                                    <div class="input-group-text">
                                        <input class="form-check-input case-sensitive" type="checkbox">
                                        <small class="ms-1">Case Sensitive</small>
                                    </div>
                                    <button type="button" class="btn btn-outline-danger" onclick="this.parentElement.parentElement.remove()">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        <button type="button" class="btn btn-outline-secondary btn-sm mt-2" onclick="addEnumerationAnswer(${questionId})">
                            <i class="fas fa-plus me-1"></i>Add Answer
                        </button>
                    `;
                    break;

                case 'identification':
                    answerHTML = `
                        <h6>Identification Answers</h6>
                        <div class="identification-container">
                            <div class="answer-item">
                                <div class="input-group">
                                    <input type="text" class="form-control identification-answer" placeholder="Correct Answer 1" required>
                                    <div class="input-group-text">
                                        <input class="form-check-input case-sensitive" type="checkbox">
                                        <small class="ms-1">Case Sensitive</small>
                                    </div>
                                    <button type="button" class="btn btn-outline-danger" onclick="this.parentElement.parentElement.remove()">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        <button type="button" class="btn btn-outline-secondary btn-sm mt-2" onclick="addIdentificationAnswer(${questionId})">
                            <i class="fas fa-plus me-1"></i>Add Alternative Answer
                        </button>
                    `;
                    break;

                case 'essay':
                    answerHTML = `
                        <h6>Essay Question</h6>
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            This is an essay question. Answers will be manually evaluated by professors.
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Expected Answer (for reference)</label>
                            <textarea class="form-control essay-answer" rows="3" placeholder="Expected answer for reference..."></textarea>
                        </div>
                    `;
                    break;
            }

            answerSection.innerHTML = answerHTML;
        }

        // Add choice for multiple choice questions
        function addChoice(questionId) {
            const choicesContainer = document.querySelector(`#question-${questionId} .choices-container`);
            const choiceCount = choicesContainer.children.length;
            const nextLetter = String.fromCharCode(65 + choiceCount);

            const choiceHTML = `
                <div class="choice-item">
                    <div class="input-group">
                        <span class="input-group-text">${nextLetter}</span>
                        <input type="text" class="form-control choice-text" placeholder="Choice ${nextLetter}" required>
                        <div class="input-group-text">
                            <input class="form-check-input correct-choice" type="checkbox" value="${nextLetter}">
                        </div>
                        <button type="button" class="btn btn-outline-danger" onclick="this.parentElement.parentElement.remove()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            `;
            choicesContainer.innerHTML += choiceHTML;
        }

        // Add enumeration answer
        function addEnumerationAnswer(questionId) {
            const enumerationContainer = document.querySelector(`#question-${questionId} .enumeration-container`);
            const answerCount = enumerationContainer.children.length + 1;

            const answerHTML = `
                <div class="answer-item">
                    <div class="input-group">
                        <input type="text" class="form-control enumeration-answer" placeholder="Answer ${answerCount}" required>
                        <div class="input-group-text">
                            <input class="form-check-input case-sensitive" type="checkbox">
                            <small class="ms-1">Case Sensitive</small>
                        </div>
                        <button type="button" class="btn btn-outline-danger" onclick="this.parentElement.parentElement.remove()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            `;
            enumerationContainer.innerHTML += answerHTML;
        }

        // Add identification answer
        function addIdentificationAnswer(questionId) {
            const identificationContainer = document.querySelector(`#question-${questionId} .identification-container`);
            const answerCount = identificationContainer.children.length + 1;

            const answerHTML = `
                <div class="answer-item">
                    <div class="input-group">
                        <input type="text" class="form-control identification-answer" placeholder="Correct Answer ${answerCount}" required>
                        <div class="input-group-text">
                            <input class="form-check-input case-sensitive" type="checkbox">
                            <small class="ms-1">Case Sensitive</small>
                        </div>
                        <button type="button" class="btn btn-outline-danger" onclick="this.parentElement.parentElement.remove()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            `;
            identificationContainer.innerHTML += answerHTML;
        }

        // Update test summary
        function updateTestSummary() {
            const totalQuestions = document.querySelectorAll('.question-item').length;
            const totalPoints = Array.from(document.querySelectorAll('.question-points'))
                .reduce((sum, input) => sum + parseInt(input.value || 0), 0);
            
            const typeCounts = {};
            document.querySelectorAll('.question-type').forEach(select => {
                const type = select.value;
                if (type) typeCounts[type] = (typeCounts[type] || 0) + 1;
            });

            document.getElementById('totalQuestions').textContent = totalQuestions;
            document.getElementById('totalPoints').textContent = totalPoints;
            
            const typesSummary = document.getElementById('questionTypesSummary');
            typesSummary.innerHTML = Object.entries(typeCounts)
                .map(([type, count]) => `${type}: ${count}`)
                .join('<br>') || 'No questions added';
        }

        // Save test
        function createTest() {
            const form = document.getElementById('testForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const formData = new FormData(form);
            const deadlineValue = formData.get('deadline').trim();
            
            const newTest = {
                _id: Date.now().toString(),
                title: formData.get('title'),
                subjectCode: formData.get('subjectCode'),
                description: formData.get('description'),
                access: formData.get('access'),
                timeLimit: parseInt(formData.get('timeLimit')),
                deadline: deadlineValue ? deadlineValue : undefined,
                howManyQuestions: parseInt(formData.get('howManyQuestions')),
                passingPoints: parseInt(formData.get('passingPoints')) || 0,
                createdByName: "Current User",
                createdAt: new Date(),
                updatedAt: new Date(),
                questions: [],
                assignedSections: [],
                prerequisites: []
            };

            // Collect questions data
            const questionItems = document.querySelectorAll('.question-item');
            questionItems.forEach(q => {
                const type = q.querySelector('.question-type').value;
                if (!type) return;

                const question = {
                    text: q.querySelector('.question-text').value.trim(),
                    type: type,
                    points: parseInt(q.querySelector('.question-points').value),
                    feedback: {
                        correct: q.querySelector('.feedback-correct')?.value.trim() || '',
                        incorrect: q.querySelector('.feedback-incorrect')?.value.trim() || ''
                    }
                };

                // Handle different question types
                switch(type) {
                    case 'multiple':
                        const choices = Array.from(q.querySelectorAll('.choice-text')).map(c => c.value.trim());
                        const correctChoices = Array.from(q.querySelectorAll('.correct-choice:checked')).map(c => c.value);
                        question.choices = choices;
                        question.correctAnswer = correctChoices;
                        break;
                    
                    case 'truefalse':
                        const selectedTF = q.querySelector('.correct-choice:checked');
                        question.correctAnswer = selectedTF ? selectedTF.value : '';
                        break;
                    
                    case 'enumeration':
                        const enumAnswers = Array.from(q.querySelectorAll('.enumeration-answer')).map(a => ({
                            answer: a.value.trim(),
                            caseSensitive: a.closest('.input-group').querySelector('.case-sensitive').checked
                        }));
                        const requiredCount = parseInt(q.querySelector('.enumeration-required').value) || 1;
                        question.answers = enumAnswers;
                        question.requiredCount = requiredCount;
                        break;
                    
                    case 'identification':
                        const idAnswers = Array.from(q.querySelectorAll('.identification-answer')).map(a => ({
                            answer: a.value.trim(),
                            caseSensitive: a.closest('.input-group').querySelector('.case-sensitive').checked
                        }));
                        question.answers = idAnswers;
                        break;
                    
                    case 'essay':
                        question.expectedAnswer = q.querySelector('.essay-answer')?.value.trim() || '';
                        break;
                }

                newTest.questions.push(question);
            });

            allTests.push(newTest);
            renderTestsTable();
            updateOverviewCards();
            
            const modal = bootstrap.Modal.getInstance(document.getElementById('createTestModal'));
            modal.hide();
            form.reset();
            document.getElementById('questionsContainer').innerHTML = '';
            questionCount = 0;
            
            alert('Test created successfully!');
        }

        // Initialize the page
        function initializePage() {
            renderTestsTable();
            updateOverviewCards();
            
            // Set up event listeners for prerequisites modal
            document.getElementById('prerequisitesModal').addEventListener('show.bs.modal', function() {
                const availableContainer = document.getElementById('availablePrerequisites');
                availableContainer.innerHTML = '';
                
                allTests.forEach(test => {
                    if (test._id === currentTestForAssignment) return; // Skip current test
                    
                    const testElement = document.createElement('div');
                    testElement.className = 'student-item';
                    testElement.innerHTML = `
                        <div class="form-check">
                            <input class="form-check-input prerequisite-checkbox" type="checkbox" value="${test._id}" id="prereq-${test._id}">
                            <label class="form-check-label" for="prereq-${test._id}">
                                ${test.title} (${test.subjectCode})
                            </label>
                        </div>
                    `;
                    availableContainer.appendChild(testElement);
                });
                
                // Set up event listeners for prerequisite checkboxes
                document.querySelectorAll('.prerequisite-checkbox').forEach(checkbox => {
                    checkbox.addEventListener('change', function() {
                        if (this.checked) {
                            selectedPrerequisites.push(this.value);
                        } else {
                            selectedPrerequisites = selectedPrerequisites.filter(p => p !== this.value);
                        }
                    });
                });
            });
        }

        // Initialize the page
        document.addEventListener('DOMContentLoaded', initializePage);
    </script>
</body>
</html>